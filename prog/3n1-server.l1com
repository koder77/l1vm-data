//  l1vm-data.l1com
//
//  network library for TCP/IP sockets
//
// demo connects to l1vm-data database
//
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
 	(set int64 1 server 0)
	(set int64 1 accept 0)
	(set int64 1 portnum 2020Q)
	(set int64 1 error 0)
	(set int64 1 server_open 0)
	(set int64 1 server_accept 0)
	(set int64 1 f 0)
	(set string 10 ip "127.0.0.1")
    (set int64 1 ip_len 10)
    (set int64 1 ret 0)
    (set int64 1 f 0)
    (set string 30 buf "                             ")
    (set int64 1 bufsize 29)
    (set int64 1 socket_handle 0)
    (set int64 1 mod_net 0)
    (set int64 1 char 0)
    (set string 11 waiting "waiting...")
	(set string s netinitstr "error: can't init networking sockets!")
    (set string s comm_store_int64 "STORE INT64")
    (set string s valstr "1234567890")
    (set string s valnamestr "test-123")
    (set int64 1 delay 2)
    (set int64 1 delay_sec 10000)
    (set string s varname_startstr "3n1-")
    (set string  30 varname_numstr "")
    (set string 30 varname_str "")
    (set int64 1 i 0)
    (set int64 1 maxnum 198)
    (mod_net one :net_init call)
	(ret stpopi)
	(loadreg)
    (one :string_init call)
	(loadreg)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		(6 netinitstr 0 0 intr0)
		(7 0 0 0 intr0)
		(255 one 0 0 intr0)
	(endif)
    (ipaddr bufaddr :get_hostbyname call)
    (ret stpopi)
    (loadreg)
    // (:end jmp)
    ((ret zero !=) f =)
    (f :try_hostbyaddr jmpi)
    (:open_socket jmp)
    (:try_hostbyaddr)
    (ipaddr bufaddr :get_hostbyaddr call)
    (ret stpopi)
    (loadreg)
    ((ret zero !=) f =)
    (f :end jmpi)
    (:open_socket)
    (4 portnum 0 0 intr0)
    (7 0 0 0 intr0)
    (bufaddr portnum :open_client_socket call)
    (ret stpopi)
    (socket_handle stpopi)
    (loadreg)
    (:write_loop)
    (varname_straddr varname_startstraddr :string_copy call)
    (loadreg)
    (i varname_numstraddr bufsize :string_int64tostring call)
    (loadreg)
    (varname_straddr varname_numstraddr :string_cat call)
    (loadreg)
    (6 varname_straddr 0 0 intr0)
    (7 0 0 0 intr0)
    (socket_handle comm_store_int64addr :socket_write_string call)
    (ret stpopi)
    (loadreg)
    (socket_handle varname_straddr :socket_write_string call)
    (ret stpopi)
    (loadreg)
    (socket_handle varname_numstraddr :socket_write_string call)
    (ret stpopi)
    (loadreg)
    (8 delay 0 0 intr0)
    (((i maxnum <) f =) f if)
        ((i one +) i =)
        (:write_loop jmp)
    (endif)
    (:end)
    // loop
    (8 delay_sec 0 0 intr0)
    (:end jmp)
    (255 0 0 0 intr0)
(funcend)
// net library
//
//
(net_init func)
	(set string 14 modulestr@net "libl1vmnet.so")
    (set string 14 initstr@net "init_sockets")
    (set string 20 open_server_socketstr@net "open_server_socket")
    (set string 19 open_accept_serverstr@net "open_accept_server")
    (set string 21 open_client_socketstr@net "open_client_socket")
    (set string 20 close_server_socketstr@net "close_server_socket")
    (set string 21 close_accept_serverstr@net "close_accept_server")
    (set string 21 close_client_socketstr@net "close_client_socket")
    (set string 15 get_clientaddrstr@net "get_clientaddr")
    (set string 13 get_hostnamestr@net "get_hostname")
    (set string 16 get_hostbynamestr@net "get_hostbyname")
    (set string 16 get_hostbyaddrstr@net "get_hostbyaddr")
    (set string 18 socket_read_bytestr@net "socket_read_byte")
    (set string 18 socket_read_int64str@net "socket_read_int64")
    (set string 19 socket_read_doublestr@net "socket_read_double")
    (set string 20 socket_read_stringstr@net "socket_read_string")
    (set string 19 socket_write_bytestr@net "socket_write_byte")
    (set string 20 socket_write_int64str@net "socket_write_int64")
    (set string 21 socket_write_doublestr@net "socket_write_double")
    (set string 20 socket_write_stringstr@net "socket_write_string")
	(set string s free@netstr "free_mem")
	(set string s get_mimetype_from_filenamestr@net "get_mimetype_from_filename")
	(set string s socket_send_filestr@net "socket_send_file")
	(set string s socket_handle_getstr@net "socket_handle_get")
    (set int64 1 init@net 0)
    (set int64 1 open_server_socket@net 1)
    (set int64 1 open_accept_server@net 2)
    (set int64 1 open_client_socket@net 3)
	(set int64 1 close_server_socket@net 4)
	(set int64 1 close_accept_server@net 5)
	(set int64 1 close_client_socket@net 6)
	(set int64 1 get_clientaddr@net 7)
	(set int64 1 get_hostname@net 8)
	(set int64 1 get_hostbyname@net 9)
	(set int64 1 get_hostbyaddr@net 10)
	(set int64 1 socket_read_byte@net 11)
    (set int64 1 socket_read_int64@net 12)
    (set int64 1 socket_read_double@net 13)
    (set int64 1 socket_read_string@net 14)
	(set int64 1 socket_write_byte@net 15)
    (set int64 1 socket_write_int64@net 16)
    (set int64 1 socket_write_double@net 17)
    (set int64 1 socket_write_string@net 18)
	(set int64 1 free@net 19)
	(set int64 1 get_mimetype_from_filename@net 20)
	(set int64 1 socket_send_file@net 21)
	(set int64 1 socket_handle_get@net 22)
	(set int64 1 mod@net 0)
	(set int64 1 maxind@net 0)
	// get arguments from stack
	(maxind@net stpopi)
	(mod@net stpopi)
	// load net module
    (0 modulestr@netaddr mod@net 0 intr0)
	// set functions
    (2 mod@net init@net initstr@netaddr intr0)
	(2 mod@net open_server_socket@net open_server_socketstr@netaddr intr0)
	(2 mod@net open_accept_server@net open_accept_serverstr@netaddr intr0)
	(2 mod@net open_client_socket@net open_client_socketstr@netaddr intr0)
	(2 mod@net close_server_socket@net close_server_socketstr@netaddr intr0)
	(2 mod@net close_accept_server@net close_accept_serverstr@netaddr intr0)
	(2 mod@net close_client_socket@net close_client_socketstr@netaddr intr0)
	(2 mod@net get_clientaddr@net get_clientaddrstr@netaddr intr0)
	(2 mod@net get_hostname@net get_hostnamestr@netaddr intr0)
	(2 mod@net get_hostbyname@net get_hostbynamestr@netaddr intr0)
	(2 mod@net get_hostbyaddr@net get_hostbyaddrstr@netaddr intr0)
	(2 mod@net socket_read_byte@net socket_read_bytestr@netaddr intr0)
    (2 mod@net socket_read_int64@net socket_read_int64str@netaddr intr0)
    (2 mod@net socket_read_double@net socket_read_doublestr@netaddr intr0)
    (2 mod@net socket_read_string@net socket_read_stringstr@netaddr intr0)
	(2 mod@net socket_write_byte@net socket_write_bytestr@netaddr intr0)
    (2 mod@net socket_write_int64@net socket_write_int64str@netaddr intr0)
    (2 mod@net socket_write_double@net socket_write_doublestr@netaddr intr0)
    (2 mod@net socket_write_string@net socket_write_stringstr@netaddr intr0)
	(2 mod@net free@net free@netstraddr intr0)
	(2 mod@net get_mimetype_from_filename@net get_mimetype_from_filenamestr@netaddr intr0)
	(2 mod@net socket_send_file@net socket_send_filestr@netaddr intr0)
	(2 mod@net socket_handle_get@net socket_handle_getstr@netaddr intr0)
	// init library
	(maxind@net stpushi)
	(3 mod@net init@net 0 intr0)
	// return value back to caller
(funcend)
// wrapper functions
(open_server_socket func)
    (3 mod@net open_server_socket@net 0 intr0)
(funcend)
(open_accept_server func)
    (3 mod@net open_accept_server@net 0 intr0)
(funcend)
(open_client_socket func)
    (3 mod@net open_client_socket@net 0 intr0)
(funcend)
(close_server_socket func)
    (3 mod@net close_server_socket@net 0 intr0)
(funcend)
(close_accept_server func)
    (3 mod@net close_accept_server@net 0 intr0)
(funcend)
(close_client_socket func)
    (3 mod@net close_client_socket@net 0 intr0)
(funcend)
(get_clientaddr func)
    (3 mod@net get_clientaddr@net 0 intr0)
(funcend)
(get_hostname func)
    (3 mod@net get_hostname@net 0 intr0)
(funcend)
(get_hostbyname func)
    (3 mod@net get_hostbyname@net 0 intr0)
(funcend)
(get_hostbyaddr func)
    (3 mod@net get_hostbyaddr@net 0 intr0)
(funcend)
(socket_read_byte func)
    (3 mod@net socket_read_byte@net 0 intr0)
(funcend)
(socket_read_int64 func)
    (3 mod@net socket_read_int64@net 0 intr0)
(funcend)
(socket_read_double func)
    (3 mod@net socket_read_double@net 0 intr0)
(funcend)
(socket_read_string func)
    (3 mod@net socket_read_string@net 0 intr0)
(funcend)
(socket_write_byte func)
    (3 mod@net socket_write_byte@net 0 intr0)
(funcend)
(socket_write_int64 func)
    (3 mod@net socket_write_int64@net 0 intr0)
(funcend)
(socket_write_double func)
    (3 mod@net socket_write_double@net 0 intr0)
(funcend)
(socket_write_string func)
    (3 mod@net socket_write_string@net 0 intr0)
(funcend)
(socket_free_mem func)
	(3 mod@net free@net 0 intr0)
(funcend)
(get_mimetype_from_filename func)
	(3 mod@net get_mimetype_from_filename@net 0 intr0)
(funcend)
(socket_send_file func)
	(3 mod@net socket_send_file@net 0 intr0)
(funcend)
(socket_handle_get func)
	(3 mod@net socket_handle_get@net 0 intr0)
(funcend)
// string library
//
//
(string_init func)
    (set string s modulestr@string "libl1vmstring.so")
    (set string s lenstr@string "string_len")
    (set string s copystr@string "string_copy")
    (set string s catstr@string "string_cat")
    (set string s int64tostringstr@string "string_int64_to_string")
    (set string s bytetohexstringstr@string "string_byte_to_hexstring")
    (set string s doubletostringstr@string "string_double_to_string")
	(set string s bytenumtostringstr@string "string_bytenum_to_string")
	(set string s stringtoarraystr@string "string_string_to_array")
	(set string s arraytostringstr@string "string_array_to_string")
	(set string s stringleftstr@string "string_left")
	(set string s stringrightstr@string "string_right")
	(set string s stringmidstr@string "string_mid")
	(set string s stringtostringstr@string "string_to_string")
	(set string s stringcomparestr@string "string_compare")
	(set string s stringmemtostringstr@string "stringmem_to_string")
	(set string s stringmemsearchstr@string "stringmem_search_string")
    (set int64 1 len@string 0)
    (set int64 1 copy@string 1)
    (set int64 1 cat@string 2)
    (set int64 1 int64tostring@string 3)
    (set int64 1 bytetohexstring@string 4)
    (set int64 1 doubletostring@string 5)
	(set int64 1 bytenumtostring@string 6)
	(set int64 1 stringtoarray@string 7)
	(set int64 1 arraytostring@string 8)
	(set int64 1 stringleft@string 9)
	(set int64 1 stringright@string 10)
	(set int64 1 stringmid@string 11)
	(set int64 1 stringtostring@string 12)
	(set int64 1 stringcompare@string 13)
	(set int64 1 stringmemtostring@string 14)
	(set int64 1 stringmemsearch@string 15)
    (set int64 1 mod@string 0)
    // get argument from stack
    (mod@string stpopi)
    // load string module
    (0 modulestr@stringaddr mod@string 0 intr0)
    // set functions
    (2 mod@string len@string lenstr@stringaddr intr0)
    (2 mod@string copy@string copystr@stringaddr intr0)
    (2 mod@string cat@string catstr@stringaddr intr0)
    (2 mod@string int64tostring@string int64tostringstr@stringaddr intr0)
    (2 mod@string bytetohexstring@string bytetohexstringstr@stringaddr intr0)
    (2 mod@string doubletostring@string doubletostringstr@stringaddr intr0)
	(2 mod@string bytenumtostring@string bytenumtostringstr@stringaddr intr0)
	(2 mod@string stringtoarray@string stringtoarraystr@stringaddr intr0)
	(2 mod@string arraytostring@string arraytostringstr@stringaddr intr0)
	(2 mod@string stringleft@string stringleftstr@stringaddr intr0)
	(2 mod@string stringright@string stringrightstr@stringaddr intr0)
	(2 mod@string stringmid@string stringmidstr@stringaddr intr0)
	(2 mod@string stringtostring@string stringtostringstr@stringaddr intr0)
	(2 mod@string stringcompare@string stringcomparestr@stringaddr intr0)
	(2 mod@string stringmemtostring@string stringmemtostringstr@stringaddr intr0)
	(2 mod@string stringmemsearch@string stringmemsearchstr@string intr0)
(funcend)
(string_len func)
// argument: int64 string address
// return: int64 string len
    (3 mod@string len@string 0 intr0)
(funcend)
(string_copy func)
// arguments: string source address, string destination address
    (3 mod@string copy@string 0 intr0)
(funcend)
(string_cat func)
// arguments: string source address, string destination address
    (3 mod@string cat@string 0 intr0)
(funcend)
(string_int64tostring func)
// arguments: int64 number, string source address, string len
    (3 mod@string int64tostring@string 0 intr0)
(funcend)
(string_bytetohexstring func)
// arguments: byte number, string source address, string len
    (3 mod@string bytetohexstring@string 0 intr0)
(funcend)
(string_doubletostring func)
// arguments: double number, string source address, string len
    (3 mod@string doubletostring@string 0 intr0)
(funcend)
(string_bytenumtostring func)
	(3 mod@string bytenumtostring@string 0 intr0)
(funcend)
(string_to_array func)
// args: sourceaddr, destaddr, index, stringlen, arraysize
	(3 mod@string stringtoarray@string 0 intr0)
(funcend)
(array_to_string func)
// args: sourceaddr, destaddr, index, stringlen, arraysize
	(3 mod@string arraytostring@string 0 intr0)
(funcend)
(string_left func)
// args: sourceaddr, destaddr, number of chars
	(3 mod@string stringleft@string 0 intr0)
(funcend)
(string_right func)
// args: sourceaddr, destaddr, number of chars
	(3 mod@string stringright@string 0 intr0)
(funcend)
(string_mid func)
// args: sourceaddr, destaddr, positon of char in source to copy
	(3 mod@string stringmid@string 0 intr0)
(funcend)
(string_to_string func)
// args: sourceddr, destaddr, position in dest to copy source char into
	(3 mod@string stringtostring@string 0 intr0)
(funcend)
(string_compare func)
// args: string1, string2
	(3 mod@string stringcompare@string 0 intr0)
(funcend)
(string_memtostring func)
	(3 mod@string stringmemtostring@string 0 intr0)
(funcend)
(string_memsearch func)
	(3 mod@string stringmemsearch@string 0 intr0)
(funcend)
