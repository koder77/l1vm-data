//  l1vm-data.l1com
//
//  network library for TCP/IP sockets
//
// demo connects to l1vm-data database
//
(main func)
    (set int64 1 zero 0)
    (set int64 1 one 1)
    (set int64 1 two 2)
 	(set int64 1 server 0)
	(set int64 1 accept 0)
	(set int64 1 portnum 2020Q)
	(set int64 1 error 0)
	(set int64 1 server_open 0)
	(set int64 1 server_accept 0)
	(set int64 1 f 0)
	(set string 10 ip "127.0.0.1")
    (set int64 1 ip_len 10)
    (set int64 1 ret 0)
    (set int64 1 f 0)
    (set string 30 buf "                             ")
    (set int64 1 bufsize 29)
    (set int64 1 socket_handle 0)
    (set int64 1 mod_net 0)
    (set int64 1 char 0)
    (set string 11 waiting "waiting...")
	(set string s netinitstr "error: can't init networking sockets!")
    (set string 30 valstr "")
    (set string 30 valnamestr "")
    (set int64 1 delay 10)
    (set int64 1 delay_sock 16)
    (set int64 1 delay_sec 10000)
    (set string s varname_startstr "3n1-")
    (set string  30 varname_numstr "")
    (set string 30 varname_str "")
    (set int64 1 i 0)
    (set int64 1 maxnum 198)
    (set int64 1 start 0)
    (set int64 1 end 0)
    (set int64 1 args 0)
    (set int64 1 args_right 2)
    (set string 30 argstr "")
    (set string s usage "l1vm 3n1-client <start-element> <end-element>")
    (set string s sock_ok "OK")
    (set string s sock_error_send "ERROR: socket connection to server is bad!")
    (set int64 1 3n1_num 0)
    (set string s err_connect_get_data "ERROR: can't get data from server!")
    (set string s err_connect_store_data "ERROR: can't store data to server!")
    (set string s 3n1_str "3n1 from server: ")
    (set string s server_numstr "3n1 string: ")
    (set string s 3n1_calcstr "3n1: result: ")
    (set string s 3n1_serverstr "3n1: server: ")
    // DEBUG
    (mod_net one :net_init call)
	(ret stpopi)
	(loadreg)
    (one :string_init call)
	(loadreg)
	(((ret zero !=) f =) f if)
		// ERROR can't allocate memory
		(6 netinitstr 0 0 intr0)
		(7 0 0 0 intr0)
		(255 one 0 0 intr0)
	(endif)
    (two :math_init call)
	(loadreg)
    (12 args 0 0 intr0)
    (4 args 0 0 intr0)
    (7 0 0 0 intr0)
    (((args args_right !=) f =) f if)
        (6 usage 0 0 intr0)
        (7 0 0 0 intr0)
        (255 one 0 0 intr0)
    (endif)
    // get arguments
    // get start number
    (13 zero argstr 0 intr0)
    (6 argstr 0 0 intr0)
    (7 0 0 0 intr0)
    (argstr :string_to_int call)
    (start stpopi)
    (loadreg)
    (13 one argstr 0 intr0)
    (6 argstr 0 0 intr0)
    (7 0 0 0 intr0)
    // DEBUG
    // (255 0 0 0 intr0)
    (argstr :string_to_int call)
    (end stpopi)
    (loadreg)
    // socket handling
    (ipaddr bufaddr :get_hostbyname call)
    (ret stpopi)
    (loadreg)
    // (:end jmp)
    ((ret zero !=) f =)
    (f :try_hostbyaddr jmpi)
    (:open_socket jmp)
    (:try_hostbyaddr)
    (ipaddr bufaddr :get_hostbyaddr call)
    (ret stpopi)
    (loadreg)
    ((ret zero !=) f =)
    (f :end jmpi)
    (:open_socket)
    (4 portnum 0 0 intr0)
    (7 0 0 0 intr0)
    (bufaddr portnum :open_client_socket call)
    (ret stpopi)
    (socket_handle stpopi)
    (loadreg)
    (start i =)
    (:work_loop)
    (8 delay_sock 0 0 intr0)
    // get number from server =================================================
    (varname_straddr varname_startstraddr :string_copy call)
    (loadreg)
    (i varname_numstraddr bufsize :string_int64tostring call)
    (loadreg)
    (varname_straddr varname_numstraddr :string_cat call)
    (loadreg)
    (6 varname_straddr 0 0 intr0)
    (7 0 0 0 intr0)
    (socket_handle varname_straddr :data_remove_int64 call)
    (ret stpopi)
    (3n1_num stpopi)
    (loadreg)
    (6 3n1_serverstr 0 0 intr0)
    (4 3n1_num 0 0 intr0)
    (7 0 0 0 intr0)
    (((ret zero !=) f =) f if)
        // error
        (6 err_connect_get_data 0 0 intr0)
        (7 0 0 0 intr0)
        (255 0 0 0 intr0)
    (endif)
    // do 3n1 calc ============================================================
    (((3n1_num zero !=) f =) f if)
        (4 3n1_num 0 0 intr0)
        (7 0 0 0 intr0)
        (3n1_num :3n1_asm call)
        (3n1_num stpopi)
        (loadreg)
        (6 3n1_calcstr 0 0 intr0)
        (4 3n1_num 0 0 intr0)
        (7 0 0 0 intr0)
        // send result to server ==================================================
        (socket_handle varname_straddr 3n1_num :data_store_int64 call)
        (ret stpopi)
        (loadreg)
        (((ret zero !=) f =) f if)
            // error
            (6 err_connect_store_data 0 0 intr0)
            (7 0 0 0 intr0)
            (255 0 0 0 intr0)
        (endif)
    (endif)
    (((i end <) f =) f if)
        ((i one +) i =)
        (:work_loop jmp)
    (endif)
    (:end)
    // loop
    (8 delay_sec 0 0 intr0)
    (:end jmp)
    (255 0 0 0 intr0)
(funcend)
(modi func)
// call: number, modulo number
    (ASM)
    stpopi 1
    stpopi 0
    modi 0, 1, 2
    stpushi 2
    rts
    (ASM_END)
(funcend)
(3n1_asm func)
    (set int64 1 num@3n1 0)
    (set int64 1 one@3n1 1)
    (set int64 1 two@3n1 2)
    (set int64 1 three@3n1 3)
    (set int64 1 count@3n1 0)
    (set int64 1 f@3n1 0)
    (set int64 1 x@3n1 0)
    (ASM)
    // get number num@3n1
    stpopi 10
    loada zero, 0, 0
    loada one@3n1, 0, 1
    loada two@3n1, 0, 2
    loada three@3n1, 0, 3
    :loop_3n1
        stpushi 0
        stpushi 1
        stpushi 2
        stpushi 3
        stpushi 10
        stpushi 2
        // call modi
        jsr :modi
        stpopi 20
        stpopi 3
        stpopi 2
        stpopi 1
        stpopi 0
        // result of modi in reg 20
        eqi 20, 0, 21
        jmpi 21, :3n1_even
        // odd calc
        muli 10, 3, 10
        addi 10, 1, 10
        jmp :3n1_next
    :3n1_even
        divi 10, 2, 10
    :3n1_next
        eqi 10, 1, 22
        jmpi 22, :3n1_end
        jmp :loop_3n1
    :3n1_end
        stpushi 10
        rts
    (ASM_END)
(funcend)
// net library
//
//
(net_init func)
	(set string 14 modulestr@net "libl1vmnet.so")
    (set string 14 initstr@net "init_sockets")
    (set string 20 open_server_socketstr@net "open_server_socket")
    (set string 19 open_accept_serverstr@net "open_accept_server")
    (set string 21 open_client_socketstr@net "open_client_socket")
    (set string 20 close_server_socketstr@net "close_server_socket")
    (set string 21 close_accept_serverstr@net "close_accept_server")
    (set string 21 close_client_socketstr@net "close_client_socket")
    (set string 15 get_clientaddrstr@net "get_clientaddr")
    (set string 13 get_hostnamestr@net "get_hostname")
    (set string 16 get_hostbynamestr@net "get_hostbyname")
    (set string 16 get_hostbyaddrstr@net "get_hostbyaddr")
    (set string 18 socket_read_bytestr@net "socket_read_byte")
    (set string 18 socket_read_int64str@net "socket_read_int64")
    (set string 19 socket_read_doublestr@net "socket_read_double")
    (set string 20 socket_read_stringstr@net "socket_read_string")
    (set string 19 socket_write_bytestr@net "socket_write_byte")
    (set string 20 socket_write_int64str@net "socket_write_int64")
    (set string 21 socket_write_doublestr@net "socket_write_double")
    (set string 20 socket_write_stringstr@net "socket_write_string")
	// data library l1vm-data commands:
	(set string s data_store_int64str@net "socket_store_int64")
	(set string s data_remove_int64str@net "socket_remove_int64")
	(set string s free@netstr "free_mem")
	(set string s get_mimetype_from_filenamestr@net "get_mimetype_from_filename")
	(set string s socket_send_filestr@net "socket_send_file")
	(set string s socket_handle_getstr@net "socket_handle_get")
    (set int64 1 init@net 0)
    (set int64 1 open_server_socket@net 1)
    (set int64 1 open_accept_server@net 2)
    (set int64 1 open_client_socket@net 3)
	(set int64 1 close_server_socket@net 4)
	(set int64 1 close_accept_server@net 5)
	(set int64 1 close_client_socket@net 6)
	(set int64 1 get_clientaddr@net 7)
	(set int64 1 get_hostname@net 8)
	(set int64 1 get_hostbyname@net 9)
	(set int64 1 get_hostbyaddr@net 10)
	(set int64 1 socket_read_byte@net 11)
    (set int64 1 socket_read_int64@net 12)
    (set int64 1 socket_read_double@net 13)
    (set int64 1 socket_read_string@net 14)
	(set int64 1 socket_write_byte@net 15)
    (set int64 1 socket_write_int64@net 16)
    (set int64 1 socket_write_double@net 17)
    (set int64 1 socket_write_string@net 18)
	(set int64 1 free@net 19)
	(set int64 1 get_mimetype_from_filename@net 20)
	(set int64 1 socket_send_file@net 21)
	(set int64 1 socket_handle_get@net 22)
	(set int64 1 data_store_int64@net 23)
	(set int64 1 data_remove_int64@net 24)
	(set int64 1 mod@net 0)
	(set int64 1 maxind@net 0)
	// get arguments from stack
	(maxind@net stpopi)
	(mod@net stpopi)
	// load net module
    (0 modulestr@netaddr mod@net 0 intr0)
	// set functions
    (2 mod@net init@net initstr@netaddr intr0)
	(2 mod@net open_server_socket@net open_server_socketstr@netaddr intr0)
	(2 mod@net open_accept_server@net open_accept_serverstr@netaddr intr0)
	(2 mod@net open_client_socket@net open_client_socketstr@netaddr intr0)
	(2 mod@net close_server_socket@net close_server_socketstr@netaddr intr0)
	(2 mod@net close_accept_server@net close_accept_serverstr@netaddr intr0)
	(2 mod@net close_client_socket@net close_client_socketstr@netaddr intr0)
	(2 mod@net get_clientaddr@net get_clientaddrstr@netaddr intr0)
	(2 mod@net get_hostname@net get_hostnamestr@netaddr intr0)
	(2 mod@net get_hostbyname@net get_hostbynamestr@netaddr intr0)
	(2 mod@net get_hostbyaddr@net get_hostbyaddrstr@netaddr intr0)
	(2 mod@net socket_read_byte@net socket_read_bytestr@netaddr intr0)
    (2 mod@net socket_read_int64@net socket_read_int64str@netaddr intr0)
    (2 mod@net socket_read_double@net socket_read_doublestr@netaddr intr0)
    (2 mod@net socket_read_string@net socket_read_stringstr@netaddr intr0)
	(2 mod@net socket_write_byte@net socket_write_bytestr@netaddr intr0)
    (2 mod@net socket_write_int64@net socket_write_int64str@netaddr intr0)
    (2 mod@net socket_write_double@net socket_write_doublestr@netaddr intr0)
    (2 mod@net socket_write_string@net socket_write_stringstr@netaddr intr0)
	(2 mod@net free@net free@netstraddr intr0)
	(2 mod@net get_mimetype_from_filename@net get_mimetype_from_filenamestr@netaddr intr0)
	(2 mod@net socket_send_file@net socket_send_filestr@netaddr intr0)
	(2 mod@net socket_handle_get@net socket_handle_getstr@netaddr intr0)
	(2 mod@net data_store_int64@net data_store_int64str@netaddr intr0)
	(2 mod@net data_remove_int64@net data_remove_int64str@netaddr intr0)
	// init library
	(maxind@net stpushi)
	(3 mod@net init@net 0 intr0)
	// return value back to caller
(funcend)
// wrapper functions
(open_server_socket func)
    (3 mod@net open_server_socket@net 0 intr0)
(funcend)
(open_accept_server func)
    (3 mod@net open_accept_server@net 0 intr0)
(funcend)
(open_client_socket func)
    (3 mod@net open_client_socket@net 0 intr0)
(funcend)
(close_server_socket func)
    (3 mod@net close_server_socket@net 0 intr0)
(funcend)
(close_accept_server func)
    (3 mod@net close_accept_server@net 0 intr0)
(funcend)
(close_client_socket func)
    (3 mod@net close_client_socket@net 0 intr0)
(funcend)
(get_clientaddr func)
    (3 mod@net get_clientaddr@net 0 intr0)
(funcend)
(get_hostname func)
    (3 mod@net get_hostname@net 0 intr0)
(funcend)
(get_hostbyname func)
    (3 mod@net get_hostbyname@net 0 intr0)
(funcend)
(get_hostbyaddr func)
    (3 mod@net get_hostbyaddr@net 0 intr0)
(funcend)
(socket_read_byte func)
    (3 mod@net socket_read_byte@net 0 intr0)
(funcend)
(socket_read_int64 func)
    (3 mod@net socket_read_int64@net 0 intr0)
(funcend)
(socket_read_double func)
    (3 mod@net socket_read_double@net 0 intr0)
(funcend)
(socket_read_string func)
    (3 mod@net socket_read_string@net 0 intr0)
(funcend)
(socket_write_byte func)
    (3 mod@net socket_write_byte@net 0 intr0)
(funcend)
(socket_write_int64 func)
    (3 mod@net socket_write_int64@net 0 intr0)
(funcend)
(socket_write_double func)
    (3 mod@net socket_write_double@net 0 intr0)
(funcend)
(socket_write_string func)
    (3 mod@net socket_write_string@net 0 intr0)
(funcend)
(socket_free_mem func)
	(3 mod@net free@net 0 intr0)
(funcend)
(get_mimetype_from_filename func)
	(3 mod@net get_mimetype_from_filename@net 0 intr0)
(funcend)
(socket_send_file func)
	(3 mod@net socket_send_file@net 0 intr0)
(funcend)
(socket_handle_get func)
	(3 mod@net socket_handle_get@net 0 intr0)
(funcend)
(data_store_int64 func)
	(3 mod@net data_store_int64@net 0 intr0)
(funcend)
(data_remove_int64 func)
	(3 mod@net data_remove_int64@net 0 intr0)
(funcend)
// string library
//
//
(string_init func)
    (set string s modulestr@string "libl1vmstring.so")
    (set string s lenstr@string "string_len")
    (set string s copystr@string "string_copy")
    (set string s catstr@string "string_cat")
    (set string s int64tostringstr@string "string_int64_to_string")
    (set string s bytetohexstringstr@string "string_byte_to_hexstring")
    (set string s doubletostringstr@string "string_double_to_string")
	(set string s bytenumtostringstr@string "string_bytenum_to_string")
	(set string s stringtoarraystr@string "string_string_to_array")
	(set string s arraytostringstr@string "string_array_to_string")
	(set string s stringleftstr@string "string_left")
	(set string s stringrightstr@string "string_right")
	(set string s stringmidstr@string "string_mid")
	(set string s stringtostringstr@string "string_to_string")
	(set string s stringcomparestr@string "string_compare")
	(set string s stringmemtostringstr@string "stringmem_to_string")
	(set string s stringmemsearchstr@string "stringmem_search_string")
    (set int64 1 len@string 0)
    (set int64 1 copy@string 1)
    (set int64 1 cat@string 2)
    (set int64 1 int64tostring@string 3)
    (set int64 1 bytetohexstring@string 4)
    (set int64 1 doubletostring@string 5)
	(set int64 1 bytenumtostring@string 6)
	(set int64 1 stringtoarray@string 7)
	(set int64 1 arraytostring@string 8)
	(set int64 1 stringleft@string 9)
	(set int64 1 stringright@string 10)
	(set int64 1 stringmid@string 11)
	(set int64 1 stringtostring@string 12)
	(set int64 1 stringcompare@string 13)
	(set int64 1 stringmemtostring@string 14)
	(set int64 1 stringmemsearch@string 15)
    (set int64 1 mod@string 0)
    // get argument from stack
    (mod@string stpopi)
    // load string module
    (0 modulestr@stringaddr mod@string 0 intr0)
    // set functions
    (2 mod@string len@string lenstr@stringaddr intr0)
    (2 mod@string copy@string copystr@stringaddr intr0)
    (2 mod@string cat@string catstr@stringaddr intr0)
    (2 mod@string int64tostring@string int64tostringstr@stringaddr intr0)
    (2 mod@string bytetohexstring@string bytetohexstringstr@stringaddr intr0)
    (2 mod@string doubletostring@string doubletostringstr@stringaddr intr0)
	(2 mod@string bytenumtostring@string bytenumtostringstr@stringaddr intr0)
	(2 mod@string stringtoarray@string stringtoarraystr@stringaddr intr0)
	(2 mod@string arraytostring@string arraytostringstr@stringaddr intr0)
	(2 mod@string stringleft@string stringleftstr@stringaddr intr0)
	(2 mod@string stringright@string stringrightstr@stringaddr intr0)
	(2 mod@string stringmid@string stringmidstr@stringaddr intr0)
	(2 mod@string stringtostring@string stringtostringstr@stringaddr intr0)
	(2 mod@string stringcompare@string stringcomparestr@stringaddr intr0)
	(2 mod@string stringmemtostring@string stringmemtostringstr@stringaddr intr0)
	(2 mod@string stringmemsearch@string stringmemsearchstr@string intr0)
(funcend)
(string_len func)
// argument: int64 string address
// return: int64 string len
    (3 mod@string len@string 0 intr0)
(funcend)
(string_copy func)
// arguments: string source address, string destination address
    (3 mod@string copy@string 0 intr0)
(funcend)
(string_cat func)
// arguments: string source address, string destination address
    (3 mod@string cat@string 0 intr0)
(funcend)
(string_int64tostring func)
// arguments: int64 number, string source address, string len
    (3 mod@string int64tostring@string 0 intr0)
(funcend)
(string_bytetohexstring func)
// arguments: byte number, string source address, string len
    (3 mod@string bytetohexstring@string 0 intr0)
(funcend)
(string_doubletostring func)
// arguments: double number, string source address, string len
    (3 mod@string doubletostring@string 0 intr0)
(funcend)
(string_bytenumtostring func)
	(3 mod@string bytenumtostring@string 0 intr0)
(funcend)
(string_to_array func)
// args: sourceaddr, destaddr, index, stringlen, arraysize
	(3 mod@string stringtoarray@string 0 intr0)
(funcend)
(array_to_string func)
// args: sourceaddr, destaddr, index, stringlen, arraysize
	(3 mod@string arraytostring@string 0 intr0)
(funcend)
(string_left func)
// args: sourceaddr, destaddr, number of chars
	(3 mod@string stringleft@string 0 intr0)
(funcend)
(string_right func)
// args: sourceaddr, destaddr, number of chars
	(3 mod@string stringright@string 0 intr0)
(funcend)
(string_mid func)
// args: sourceaddr, destaddr, positon of char in source to copy
	(3 mod@string stringmid@string 0 intr0)
(funcend)
(string_to_string func)
// args: sourceddr, destaddr, position in dest to copy source char into
	(3 mod@string stringtostring@string 0 intr0)
(funcend)
(string_compare func)
// args: string1, string2
	(3 mod@string stringcompare@string 0 intr0)
(funcend)
(string_memtostring func)
	(3 mod@string stringmemtostring@string 0 intr0)
(funcend)
(string_memsearch func)
	(3 mod@string stringmemsearch@string 0 intr0)
(funcend)
// math library
//
//
(math_init func)
    (set string 15 modulestr@math "libl1vmmath.so")
    (set string 12 int2doublestr@math "int2double")
    (set string 12 double2intstr@math "double2int")
    (set string 12 sqrtdoublestr@math "sqrtdouble")
    (set string 10 logdoublestr@math "logdouble")
    (set string 11 log2doublestr@math "log2double")
    (set string 10 randinitstr@math "rand_init")
    (set string 9 randintstr@math "rand_int")
    (set string 12 randdoublestr@math "rand_double")
    (set string 13 randintmaxstr@math "rand_int_max")
    (set string 22 doubleroundedstringstr@math "double_rounded_string")
    (set string s stringtointstr@math "string_to_int")
    (set string s stringtodoublestr@math "string_to_double")
    (set int64 1 int2double@math 0)
    (set int64 1 double2int@math 1)
    (set int64 1 sqrtdouble@math 2)
    (set int64 1 logdouble@math 3)
    (set int64 1 log2double@math 4)
    (set int64 1 randinit@math 5)
    (set int64 1 randint@math 6)
    (set int64 1 randdouble@math 7)
    (set int64 1 randintmax@math 8)
    (set int64 1 doubleroundedstring@math 9)
    (set int64 1 stringtoint@math 10)
    (set int64 1 stringtodouble@math 11)
    (set int64 1 mod@math 0)
    // get argument from stack
    (mod@math stpopi)
    // load math module
    (0 modulestr@mathaddr mod@math 0 intr0)
    // set functions
    (2 mod@math int2double@math int2doublestr@mathaddr intr0)
    (2 mod@math double2int@math double2intstr@mathaddr intr0)
    (2 mod@math sqrtdouble@math sqrtdoublestr@mathaddr intr0)
    (2 mod@math logdouble@math logdoublestr@mathaddr intr0)
    (2 mod@math log2double@math log2doublestr@mathaddr intr0)
    (2 mod@math randinit@math randinitstr@mathaddr intr0)
    (2 mod@math randint@math randintstr@mathaddr intr0)
    (2 mod@math randdouble@math randdoublestr@mathaddr intr0)
    (2 mod@math randintmax@math randintmaxstr@mathaddr intr0)
    (2 mod@math doubleroundedstring@math doubleroundedstringstr@mathaddr intr0)
    (2 mod@math stringtoint@math stringtointstr@mathaddr intr0)
    (2 mod@math stringtodouble@math stringtodoublestr@mathaddr intr0)
(funcend)
// wrapper functions
(math_int2double func)
    (3 mod@math int2double@math 0 intr0)
(funcend)
(math_double2int func)
    (3 mod@math double2int@math 0 intr0)
(funcend)
(math_sqrtdouble func)
    (3 mod@math sqrtdouble@math 0 intr0)
(funcend)
(math_logdouble func)
    (3 mod@math logdouble@math 0 intr0)
(funcend)
(math_log2double func)
    (3 mod@math log2double@math 0 intr0)
(funcend)
(math_randinit func)
    (3 mod@math randinit@math 0 intr0)
(funcend)
(math_randint func)
    (3 mod@math randint@math 0 intr0)
(funcend)
(math_randdouble func)
    (3 mod@math randdouble@math 0 intr0)
(funcend)
(math_randintmax func)
    (3 mod@math randintmax@math 0 intr0)
(funcend)
(double_rounded_string func)
	(3 mod@math doubleroundedstring@math 0 intr0)
(funcend)
(string_to_int func)
	(3 mod@math stringtoint@math 0 intr0)
(funcend)
(string_to_double func)
	(3 mod@math stringtodouble@math 0 intr0)
(funcend)
(math_not func)
// get int64 number argument from stack
// and push the not number to the stack
	(ASM)
	stpopi 1
	noti 1, 2
	stpushi 2
	rts
	(ASM_END)
(funcend)
